 
import 'dart:convert';

import 'package:ecoleti/environments/constants.dart';
import 'package:ecoleti/interceptors/tokenInterceptor.dart';
import 'package:ecoleti/library/api_request.dart';
import 'package:ecoleti/models/demande.dart';
import 'package:ecoleti/models/notice.dart';
import 'package:ecoleti/models/post.dart';
import 'package:ecoleti/models/todo.dart';
import 'package:http/http.dart' as http;
import 'package:http/http.dart';
import 'package:http_interceptor/http_interceptor.dart';
class PostsProvider {
    static var client = http.Client();
    static  Client _clientWithInterceptor = InterceptedClient.build(interceptors: [
    TokenInterceptor(),
  ]);
  static getPostsList({
    Function()? beforeSend,
    Function(List<Demande> posts)? onSuccess,
    Function(dynamic error) ?onError,
  }) {
    ApiRequest(url: '${Constants.ecoletiApiUrl}parent-request/parent/390', data: {}).get(
      beforeSend: () => {if (beforeSend != null) beforeSend()},
      onSuccess: (data) {
        onSuccess!((data as List).map((postJson) => Demande.fromJson(postJson)).toList());
      },
      onError: (error) => {if (onError != null) onError(error)},
    );
  }

   static getPostsNotice({
    Function()? beforeSend,
    int? StudentId,
    Function(List<Notice> posts)? onSuccess,
    Function(dynamic error) ?onError,
  }) {
    ApiRequest(url: '${Constants.ecoletiApiUrl}notice/student/$StudentId/2021', data: {}).get(
      beforeSend: () => {if (beforeSend != null) beforeSend()},
      onSuccess: (data) {
        onSuccess!((data as List).map((postJson) => Notice.fromJson(postJson)).toList());
      },
      onError: (error) => {if (onError != null) onError(error)},
    );
  }


   static Future<List<Demande>?> getTodo() async {
  try {
      Response _response = await _clientWithInterceptor.get(Uri.parse(
          "${Constants.ecoletiApiUrl}parent-request/parent/390"));
      if (_response.statusCode == 200) {
        print( jsonDecode(_response.body));
        List jsonResponse = jsonDecode(_response.body);
        return jsonResponse.map((e) => new Demande.fromJson(e)).toList();
      } else {
        throw Exception();
      }
    } on Exception catch (e) {
      print(e);
      throw e;
    }
  }}
